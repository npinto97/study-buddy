import subprocess
import os
import time
import signal
import json
import shutil
from datetime import datetime
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd

# Vector PDF backend for high-quality LaTeX integration
matplotlib.use("pdf")

API_HOST = "http://127.0.0.1"
API_PORT = 8000
RESULTS_DIR = "./load_test_reports"
LOCUST_FILE = "locust_test.py"
USERS = 20
SPAWN_RATE = 2
DURATION = "1m"  # Accepted formats: 30s, 1m, 5m

# Select test scenario: StudyBuddyLoadTest, LightLoad, HeavyLoad, StressTest
TARGET_CLASS = "StudyBuddyLoadTest"  

def ensure_results_dir():
    os.makedirs(RESULTS_DIR, exist_ok=True)
    print(f"Results directory: {RESULTS_DIR}")

def start_api():
    """Start FastAPI server in background."""
    print("Starting FastAPI server...")
    api_process = subprocess.Popen(
        ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", str(API_PORT)],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    time.sleep(3)
    return api_process

def run_locust():
    """Run Locust in headless mode and save results."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    csv_prefix = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_{timestamp}")
    json_path = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_{timestamp}.json")

    print(f"Running Locust with {USERS} users, spawn rate {SPAWN_RATE}/s for {DURATION}...")
    subprocess.run([
        "locust",
        "-f", LOCUST_FILE,
        "--headless",
        "--host", f"{API_HOST}:{API_PORT}",
        "-u", str(USERS),
        "-r", str(SPAWN_RATE),
        "--run-time", DURATION,
        "--class-picker", TARGET_CLASS,
        "--csv", csv_prefix
    ], check=True)

    # Move JSON results generated by locust_test.py
    if os.path.exists("load_test_results.json"):
        shutil.move("load_test_results.json", json_path)
        print(f"JSON results saved to: {json_path}")
    else:
        print("Warning: Locust did not generate a JSON report.")

    return json_path, csv_prefix, timestamp

def stop_api(api_process):
    """Stop FastAPI server."""
    print("Stopping FastAPI server...")
    api_process.send_signal(signal.SIGTERM)
    api_process.wait()

def generate_graphs(csv_prefix, timestamp):
    """Generate vector PDF graphs from Locust CSV output."""
    requests_csv = f"{csv_prefix}_requests.csv"
    distributions_csv = f"{csv_prefix}_distribution.csv"

    graphs = {}

    df_req = pd.read_csv(requests_csv)

    # Average Response Time per Endpoint
    if not df_req.empty:
        plt.figure(figsize=(7, 5))
        plt.bar(df_req['Name'], df_req['Average Response Time'], color="steelblue")
        plt.xticks(rotation=45, ha="right")
        plt.xlabel("Endpoints")
        plt.ylabel("Avg Response Time (ms)")
        plt.title(f"{TARGET_CLASS} - Average Response Time per Endpoint")
        plt.tight_layout()
        graph_path = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_avg_response_time_{timestamp}.pdf")
        plt.savefig(graph_path)
        graphs["avg_response_time"] = graph_path
        plt.close()

    # Success Rate per Endpoint
    if 'Failure Count' in df_req.columns and 'Request Count' in df_req.columns:
        df_req['Success Rate'] = 100 * (df_req['Request Count'] - df_req['Failure Count']) / df_req['Request Count']
        plt.figure(figsize=(7, 5))
        plt.bar(df_req['Name'], df_req['Success Rate'], color="forestgreen")
        plt.xticks(rotation=45, ha="right")
        plt.xlabel("Endpoints")
        plt.ylabel("Success Rate (%)")
        plt.title(f"{TARGET_CLASS} - Success Rate per Endpoint")
        plt.tight_layout()
        graph_path = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_success_rate_{timestamp}.pdf")
        graphs["success_rate"] = graph_path
        plt.savefig(graph_path)
        plt.close()

    # Requests Over Time
    if os.path.exists(distributions_csv):
        df_dist = pd.read_csv(distributions_csv)
        if not df_dist.empty and "Timestamp" in df_dist.columns and "Requests/s" in df_dist.columns:
            plt.figure(figsize=(7, 5))
            plt.plot(df_dist["Timestamp"], df_dist["Requests/s"], label="Requests/s", color="darkorange")
            plt.xlabel("Time (s)")
            plt.ylabel("Requests per second")
            plt.title(f"{TARGET_CLASS} - Requests Over Time")
            plt.legend()
            plt.tight_layout()
            graph_path = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_requests_over_time_{timestamp}.pdf")
            graphs["requests_over_time"] = graph_path
            plt.savefig(graph_path)
            plt.close()

    return graphs

def generate_latex_report(json_path, graphs, timestamp):
    """Generate LaTeX file for thesis integration."""
    with open(json_path, "r") as f:
        data = json.load(f)

    latex_path = os.path.join(RESULTS_DIR, f"{TARGET_CLASS}_load_test_report_{timestamp}.tex")
    with open(latex_path, "w") as tex:
        tex.write("\\section{Load Testing Results}\n\n")
        tex.write(f"This section presents the results of the automated load tests conducted on the StudyBuddy API using the \\textbf{{{TARGET_CLASS}}} scenario.\n\n")
        
        tex.write("\\subsection{General Metrics}\n")
        tex.write(f"\\textbf{{Total Requests}}: {data['total_requests']}\\\\\n")
        tex.write(f"\\textbf{{Success Rate}}: {data['success_rate']}\\\\\n")
        tex.write(f"\\textbf{{Average Response Time}}: {data['avg_response_time']}\\\\\n\n")

        tex.write("\\subsection{Tool Performance}\n")
        tex.write("\\begin{table}[h!]\n\\centering\n")
        tex.write("\\begin{tabular}{|l|c|c|c|}\n\\hline\n")
        tex.write("Tool & Calls & Success Rate & Avg Response Time \\\\\n\\hline\n")
        for tool, perf in data["tool_performance"].items():
            tex.write(f"{tool} & {perf['calls']} & {perf['success_rate']} & {perf['avg_response_time']} \\\\\n")
        tex.write("\\hline\n\\end{tabular}\n")
        tex.write("\\caption{Performance metrics for each tool during the \\textbf{" + TARGET_CLASS + "} test}\n")
        tex.write("\\end{table}\n\n")

        tex.write("\\subsection{Graphs}\n")
        for title, path in graphs.items():
            rel_path = os.path.relpath(path, os.path.dirname(latex_path))
            tex.write("\\begin{figure}[h!]\n\\centering\n")
            tex.write(f"\\includegraphics[width=0.8\\linewidth]{{{rel_path}}}\n")
            tex.write(f"\\caption{{{TARGET_CLASS} - {title.replace('_', ' ').title()}}}\n")
            tex.write("\\end{figure}\n\n")

    print(f"LaTeX report generated: {latex_path}")
    return latex_path

if __name__ == "__main__":
    ensure_results_dir()
    api_process = start_api()

    try:
        json_path, csv_prefix, timestamp = run_locust()
        graphs = generate_graphs(csv_prefix, timestamp)
        generate_latex_report(json_path, graphs, timestamp)
    finally:
        stop_api(api_process)
